(define (iterative-improvement good-enough? improve)
  (lambda (first-guess)
  	(define (try guess)
      (let ((next (improve guess)))
        (if (good-enough? guess next)
      	  next
      	  (try next)
        )
      )
  	)
  	(try first-guess)
  )
)

(define (sqrt x)
  (define torlerance 0.001)
  (define (good-enough? z)
  	(lambda (_ next)
      (< (abs (- (square next) z)) torlerance)
    )
  )
  (define (improve x)
  	(lambda (y)
  	  (/ (+ y (/ x y)) 2.0)
  	)
  )
  ((iterative-improvement (good-enough? x) (improve x)) 1)
)

(define (fixed-point f first-guess)
  (define torlerance 0.001)
  (define (close-enough? v1 v2)
  	(< (abs (- v1 v2)) torlerance)
  )
  ((iterative-improvement close-enough? f) first-guess)
)

(sqrt 9)
(sqrt 16)

(fixed-point (lambda (x) (/ (+ x (/ 9.0 x)) 2.0)) 1.0)
(fixed-point (lambda (x) (/ (+ x (/ 16.0 x)) 2.0)) 1.0)

